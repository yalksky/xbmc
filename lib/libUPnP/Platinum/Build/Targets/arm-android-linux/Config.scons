import os
import re
import sys
import platform

ANDROID_NDK_ROOT=os.getenv('ANDROID_NDK_ROOT')
if not ANDROID_NDK_ROOT:
    raise Exception('ANDROID_NDK_ROOT environment variable not set')

ANRDOID_NDK_OUT=ANDROID_NDK_ROOT+'/out'
ANDROID_TOOLCHAIN='arm-linux-androideabi-4.4.3'
if env.has_key('target_variant') and env['target_variant']:
    ANDROID_PLATFORM=env['target_variant']
else:
    ANDROID_PLATFORM='android-9'
print 'Building for: ', ANDROID_PLATFORM, ANDROID_TOOLCHAIN

### figure out the host config
try:
    host_config = open(ANRDOID_NDK_OUT+'/host/config.mk')
    HOST_CONFIG={}
    for line in host_config.readlines():
        pair = re.split('\s+:=\s+', line);
        if len(pair) == 2:
            HOST_CONFIG[pair[0]] = pair[1].rstrip()
            
    host_config.close()
except:
    platform_map = {'linux2':'linux-x86', 'darwin':'darwin-x86', 'cygwin':'windows'}
    if sys.platform not in platform_map:
        raise Exception('Unrecognized host platform')
    HOST_CONFIG={'HOST_TAG':platform_map[sys.platform]}

### check the android toolchain
ANDROID_TOOLCHAIN_ROOT = ANDROID_NDK_ROOT+'/toolchains/'+ANDROID_TOOLCHAIN+'/prebuilt/'+HOST_CONFIG['HOST_TAG']
ANDROID_TOOLCHAIN_BIN  = ANDROID_TOOLCHAIN_ROOT+'/bin'
if not os.path.exists(ANDROID_TOOLCHAIN_BIN):
    raise Exception('ANDROID toolchain not found: '+ANDROID_TOOLCHAIN_BIN)

ANDROID_PLATFORM_ROOT   = ANDROID_NDK_ROOT+'/platforms/'+ANDROID_PLATFORM
ANDROID_PLATFORM_ARM    = ANDROID_PLATFORM_ROOT+'/arch-arm'

### add the tools to the path
env.PrependENVPath('PATH', ANDROID_TOOLCHAIN_BIN)

### figure out the path of libgcc.a for the selected toolchain
subproc = os.popen(ANDROID_TOOLCHAIN_BIN+'/arm-linux-androideabi-gcc -mthumb-interwork -print-libgcc-file-name', 'r')
libgcc_path = subproc.readlines()[0].rstrip()
subproc.close()

### setup compiler options
android_includes = [ANDROID_PLATFORM_ARM+'/'+'usr/include',
                    ANDROID_NDK_ROOT+'/sources/cxx-stl/system/include']

android_extras = ['--sysroot', ANDROID_PLATFORM_ARM,
                  '-MMD',
                  '-MP',
                  '-Os',
                  '-march=armv5te',
                  '-mtune=xscale',
                  '-msoft-float',
                  '-fpic',
                  '-mthumb',
                  '-Wno-psabi',
                  '-ffunction-sections',
                  '-funwind-tables',
                  '-fstack-protector',
                  '-fno-short-enums',
                  '-Wa,--noexecstack']

android_extras_cpp = ['-fno-exceptions',
                      '-fno-rtti']

android_defines = ['-DANDROID',
                   '-DANDROID_NDK',
                   '-D__ARM_ARCH_5__',
                   '-D__ARM_ARCH_5T__',
                   '-D__ARM_ARCH_5E__',
                   '-D__ARM_ARCH_5TE__']


if env['build_config'] == 'Release':
    android_optimize = ['-finline-functions',
                        '-finline-limit=64',
                        '-fno-inline-functions-called-once',
                        '-fgcse-after-reload',
                        '-frerun-cse-after-loop',
                        '-frename-registers',
                        '-fomit-frame-pointer',
                        '-fno-strict-aliasing',
                        '-funswitch-loops']
else:
    android_optimize = []

android_link = ['-Bdynamic',
                '-Wl,--no-undefined',
                '-Wl,-rpath=/system/lib',
                '-Wl,--dynamic-linker=/system/bin/linker',
                '-Wl,-rpath-link=' + ANDROID_PLATFORM_ARM+'/usr/lib',
                '-L' + ANDROID_PLATFORM_ARM+'/usr/lib',
                '-nostdlib',
                libgcc_path,
                ANDROID_PLATFORM_ARM+'/usr/lib/libc.so',
                ANDROID_PLATFORM_ARM+'/usr/lib/libstdc++.so',
                ANDROID_PLATFORM_ARM+'/usr/lib/libm.so',
                '-ldl',
                '-llog']

env['NPT_EXTRA_EXECUTABLE_OBJECTS'] = [ANDROID_PLATFORM_ARM+'/usr/lib/crtbegin_static.o',
                                       ANDROID_PLATFORM_ARM+'/usr/lib/crtend_android.o']


### Load the tools
LoadTool('gcc-generic', env, gcc_cross_prefix='arm-linux-androideabi', gcc_strict=False)
env.AppendUnique(CCFLAGS = ['-I'+x for x in android_includes] + android_extras + android_defines + android_optimize )
env.AppendUnique(CXXFLAGS = android_extras_cpp)
env.AppendUnique(LINKFLAGS = android_link)
env.AppendUnique(CPPDEFINES = ['NPT_CONFIG_HAVE_SYSTEM_LOG_CONFIG'])

env['NPT_SYSTEM_SOURCES']={'System/StdC':'NptStdc[!D]*.cpp',
                           'System/Bsd':'*.cpp',
                           'System/Posix':'*.cpp',
                           'System/Null':'NptNullSerialPort.cpp',
                           'System/Android':'*.cpp'}